'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Request = function () {
  function Request(config, client, response) {
    _classCallCheck(this, Request);

    this.config = config;
    this.client = client;
    this.response = response;
  }
  // Account

  _createClass(Request, [{
    key: 'accountSetup',
    value: function accountSetup(key, secret, flags) {
      this._verifyCredentials(key, secret, this.response.accountSetup(this.config, key, secret, flags).bind(this.response));
    }
  }, {
    key: '_verifyCredentials',
    value: function _verifyCredentials(key, secret, callback) {
      var client = this.client.instanceWith(key, secret);
      client.account.checkBalance(callback);
    }
  }, {
    key: 'accountInfo',
    value: function accountInfo() {
      this.response.accountInfo(this.client.instance());
    }
  }, {
    key: 'accountBalance',
    value: function accountBalance() {
      this.client.instance().account.checkBalance(this.response.accountBalance.bind(this.response));
    }

    // Pricing

  }, {
    key: 'priceSms',
    value: function priceSms(number) {
      number = stripPlus(number);
      this.client.instance().number.getPhonePricing('sms', number, this.response.priceSms.bind(this.response));
    }
  }, {
    key: 'priceVoice',
    value: function priceVoice(number) {
      number = stripPlus(number);
      this.client.instance().number.getPhonePricing('voice', number, this.response.priceVoice.bind(this.response));
    }
  }, {
    key: 'priceCountry',
    value: function priceCountry(country_code) {
      this.client.instance().number.getPricing(country_code, this.response.priceCountry.bind(this.response));
    }

    // Numbers

  }, {
    key: 'numbersList',
    value: function numbersList(flags) {
      var options = { size: 100 };
      if (flags.page) {
        options.index = flags.page;
      }
      if (flags.size) {
        options.size = flags.size;
      }

      if (flags.pattern) {
        options.pattern = flags.pattern;
        options.search_pattern = 1;
        if (options.pattern[0] === '*') options.search_pattern = 2;
        if (options.pattern.slice(-1) === '*') options.search_pattern = 0;
      }

      this.client.instance().number.get(options, this.response.numbersList(flags).bind(this.response));
    }
  }, {
    key: 'numberSearch',
    value: function numberSearch(country_code, flags) {
      country_code = country_code.toUpperCase();

      var options = { features: [], size: 100 };
      if (flags.voice) {
        options.features.push('VOICE');
      }
      if (flags.sms) {
        options.features.push('SMS');
      }
      if (flags.page) {
        options.index = flags.page;
      }
      if (flags.size) {
        options.size = flags.size;
      }

      if (flags.pattern) {
        options.pattern = flags.pattern;
        options.search_pattern = 1;
        if (options.pattern[0] === '*') options.search_pattern = 2;
        if (options.pattern.slice(-1) === '*') options.search_pattern = 0;
      }

      this.client.instance().number.search(country_code, options, this.response.numberSearch(flags).bind(this.response));
    }
  }, {
    key: 'numberBuy',
    value: function numberBuy(numberOrPattern, command) {
      if (command.country_code) {
        this.numberBuyFromSearch(command.country_code, numberOrPattern, command);
      } else {
        this.numberBuyFromNumber(numberOrPattern, command);
      }
    }
  }, {
    key: 'numberBuyFromNumber',
    value: function numberBuyFromNumber(number, flags) {
      var _this = this;

      number = stripPlus(number);
      confirm('Buying ' + number + '. This operation will charge your account.', this.response.emitter, flags, function () {
        _this.getCountryCode(number, flags, function (country_code) {
          _this.client.instance().number.buy(country_code, number, _this.response.numberBuyFromNumber(number).bind(_this.response));
        });
      });
    }
  }, {
    key: 'numberBuyFromSearch',
    value: function numberBuyFromSearch(country_code, pattern, flags) {
      var _this2 = this;

      var options = { features: ['VOICE'] };

      if (pattern) {
        options.pattern = pattern;
        options.search_pattern = 1;
        if (pattern[0] === '*') options.search_pattern = 2;
        if (pattern.slice(-1) === '*') options.search_pattern = 0;
      }

      this.client.instance().number.search(country_code, options, this.response.numberBuyFromPattern(function (number) {
        _this2.numberBuyFromNumber(number, flags);
      }));
    }
  }, {
    key: 'numberCancel',
    value: function numberCancel(number, flags) {
      var _this3 = this;

      confirm('This operation can not be reversed.', this.response.emitter, flags, function () {
        _this3.getCountryCode(number, flags, function (country_code) {
          _this3.client.instance().number.cancel(country_code, number, _this3.response.numberCancel(number).bind(_this3.response));
        });
      });
    }

    // Applications

  }, {
    key: 'applicationsList',
    value: function applicationsList(flags) {
      var options = { page_size: 100 };
      if (flags.page) {
        options.index = flags.page;
      }
      if (flags.size) {
        options.page_size = flags.size;
      }

      this.client.instance().app.get(options, this.response.applicationsList(flags).bind(this.response));
    }
  }, {
    key: 'applicationCreate',
    value: function applicationCreate(name, answer_url, event_url, flags) {
      var options = {};
      if (flags.answer_method) {
        options.answer_method = flags.answer_method;
      }
      if (flags.event_method) {
        options.event_method = flags.event_method;
      }

      this.client.instance().app.create(name, flags.type, answer_url, event_url, options, this.response.applicationCreate(flags));
    }
  }, {
    key: 'applicationShow',
    value: function applicationShow(app_id) {
      this.client.instance().app.get(app_id, this.response.applicationShow.bind(this.response));
    }
  }, {
    key: 'applicationUpdate',
    value: function applicationUpdate(app_id, name, answer_url, event_url, flags) {
      var options = {};
      if (flags.answer_method) {
        options.answer_method = flags.answer_method;
      }
      if (flags.event_method) {
        options.event_method = flags.event_method;
      }

      this.client.instance().app.update(app_id, name, flags.type, answer_url, event_url, options, this.response.applicationUpdate.bind(this.response));
    }
  }, {
    key: 'applicationDelete',
    value: function applicationDelete(app_id, flags) {
      var _this4 = this;

      return confirm('This operation can not be reversed.', this.response.emitter, flags, function () {
        _this4.client.instance().app.delete(app_id, _this4.response.applicationDelete.bind(_this4.response));
      });
    }
  }, {
    key: 'applicationNumbers',
    value: function applicationNumbers(app_id, flags) {
      var options = {};
      if (flags.page) {
        options.index = flags.page;
      }
      if (flags.size) {
        options.size = flags.size;
      }

      this.client.instance().number.get(options, this.response.applicationNumbers(app_id, flags).bind(this.response));
    }

    // links

  }, {
    key: 'linkApp',
    value: function linkApp(number, app_id, flags) {
      this._link(number, flags, null, 'app', app_id);
    }
  }, {
    key: 'linkSms',
    value: function linkSms(number, callback_url, flags) {
      this._link(number, flags, callback_url, 'sms', null);
    }
  }, {
    key: 'linkTel',
    value: function linkTel(number, other_number, flags) {
      this._link(number, flags, null, 'tel', other_number, flags.voice_status_callback);
    }
  }, {
    key: 'linkSip',
    value: function linkSip(number, sip_uri, flags) {
      this._link(number, flags, null, 'sip', sip_uri, flags.voice_status_callback);
    }
  }, {
    key: 'linkVxml',
    value: function linkVxml(number, calback_url, flags) {
      this._link(number, flags, null, 'vxml', calback_url, flags.voice_status_callback);
    }
  }, {
    key: 'unlinkApp',
    value: function unlinkApp(number, flags) {
      this._link(number, flags, null, 'app');
    }
  }, {
    key: 'unlinkSms',
    value: function unlinkSms(number, flags) {
      this._link(number, flags, '', 'sms');
    }
  }, {
    key: 'unlinkTel',
    value: function unlinkTel(number, flags) {
      this._link(number, flags, null, 'tel');
    }
  }, {
    key: 'unlinkSip',
    value: function unlinkSip(number, flags) {
      this._link(number, flags, null, 'sip');
    }
  }, {
    key: 'unlinkVxml',
    value: function unlinkVxml(number, flags) {
      this._link(number, flags, null, 'vxml');
    }
  }, {
    key: 'numberUpdate',
    value: function numberUpdate(number, flags) {
      var _this5 = this;

      number = stripPlus(number);
      this.getCountryCode(number, flags, function (country_code) {
        var options = {};
        if (flags.mo_http_url) options.moHttpUrl = flags.mo_http_url;
        if (flags.voice_callback_type) options.voiceCallbackType = flags.voice_callback_type;
        if (flags.voice_callback_value) options.voiceCallbackValue = flags.voice_callback_value;
        if (flags.voice_status_callback) options.voiceStatusCallback = flags.voice_status_callback;
        _this5.client.instance().number.update(country_code, number, options, _this5.response.numberUpdate.bind(_this5.response));
      });
    }
  }, {
    key: '_link',
    value: function _link(number, flags, mo_http_url, voice_callback_type, voice_callback_value, voice_status_callback) {
      var _this6 = this;

      if (flags == null) {
        flags = {};
      }
      number = stripPlus(number);
      this.getCountryCode(number, flags, function (country_code) {
        var options = {};

        if (voice_callback_type == 'sms') {
          options.moHttpUrl = mo_http_url;
        } else {
          options.voiceCallbackType = voice_callback_type;
          if (voice_callback_value) options.voiceCallbackValue = voice_callback_value;
          if (voice_status_callback) options.voiceStatusCallback = voice_status_callback;
        }

        _this6.client.instance().number.update(country_code, number, options, _this6.response.numberUpdate.bind(_this6.response));
      });
    }

    // Insight

  }, {
    key: 'insightBasic',
    value: function insightBasic(number) {
      number = stripPlus(number);
      this.client.instance().numberInsight.get({ level: 'basic', number: number }, this.response.insightBasic.bind(this.response));
    }
  }, {
    key: 'insightStandard',
    value: function insightStandard(number, flags) {
      var _this7 = this;

      number = stripPlus(number);
      confirm('This operation will charge your account.', this.response.emitter, flags, function () {
        _this7.client.instance().numberInsight.get({ level: 'standard', number: number }, _this7.response.insightStandard.bind(_this7.response));
      });
    }
  }, {
    key: 'insightAdvanced',
    value: function insightAdvanced(number, flags) {
      var _this8 = this;

      number = stripPlus(number);
      confirm('This operation will charge your account.', this.response.emitter, flags, function () {
        _this8.client.instance().numberInsight.get({ level: 'advancedSync', number: number }, _this8.response.insightStandard.bind(_this8.response));
      });
    }

    // sending messages

  }, {
    key: 'sendSms',
    value: function sendSms(to, text, flags) {
      var _this9 = this;

      confirm('This operation will charge your account.', this.response.emitter, flags, function () {
        _this9.client.instance().message.sendSms(flags.from, to, text.join(' '), _this9.response.sendSms.bind(_this9.response));
      });
    }
  }, {
    key: 'generateJwt',
    value: function generateJwt(privateKey, claims, flags) {
      var token = null;
      var error = null;

      try {
        var fullClaims = {};
        if (flags.app_id) {
          fullClaims['application_id'] = flags.app_id;
        }

        claims.forEach(function (claim) {
          var nameValue = claim.split('=');
          if (nameValue.length !== 2) {
            throw new Error('All claims must be in the form `name=value`. Got: ' + nameValue);
          }
          fullClaims[nameValue[0]] = nameValue[1];
        });

        token = this.client.definition().generateJwt(privateKey, fullClaims);
      } catch (ex) {
        error = ex;
      }
      this.response.generateJwt(error, token);
    }
  }, {
    key: 'getCountryCode',
    value: function getCountryCode(number, flags, callback) {
      if (flags.country_code) {
        callback(flags.country_code);
      } else {
        this.client.instance().numberInsight.get({ level: 'basic', number: number }, this.response.numberInsight(function (response) {
          callback(response.country_code);
        }));
      }
    }
  }]);

  return Request;
}();

exports.default = Request;

// private methods

var confirm = function confirm(message, emitter, flags, callback) {
  if (flags.confirm) {
    callback();
  } else {
    var cli = _readline2.default.createInterface(process.stdin, process.stdout);
    cli.question(message + '\n\nPlease type "confirm" to continue: ', function (answer) {
      if (answer.toString().trim() == 'confirm') {
        emitter.log(' ');
        callback();
      } else {
        process.exit(1);
      }

      cli.close();
      process.stdin.destroy();
    });
  }
};

var stripPlus = function stripPlus(number) {
  if (!number) {
    return number;
  }
  while (number.charAt(0) === '+') {
    number = number.substr(1);
  }
  return number;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,