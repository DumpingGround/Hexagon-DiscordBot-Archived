'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Response = function () {
  function Response(validator, emitter) {
    _classCallCheck(this, Response);

    this.emitter = emitter;
    this.validator = validator;
  }

  _createClass(Response, [{
    key: 'accountSetup',
    value: function accountSetup(config, key, secret, flags) {
      var _this = this;

      return function (error, response) {
        _this.validator.response(error, response);
        config.putAndSave({
          'credentials': {
            'api_key': key,
            'api_secret': secret
          }
        }, flags.local);
      };
    }
  }, {
    key: 'accountInfo',
    value: function accountInfo(client) {
      this.emitter.log('API Key:    ' + client.credentials.apiKey + '\nAPI Secret: ' + client.credentials.apiSecret);
    }
  }, {
    key: 'accountBalance',
    value: function accountBalance(error, response) {
      this.validator.response(error, response);
      this.emitter.log(Number(response.value.toFixed(2)) + ' EUR', response.value + ' EUR');
    }

    // Pricing

  }, {
    key: 'priceSms',
    value: function priceSms(error, response) {
      this.validator.response(error, response);
      this.emitter.log(response.price + ' EUR');
    }
  }, {
    key: 'priceVoice',
    value: function priceVoice(error, response) {
      this.validator.response(error, response);
      this.emitter.log(response.price + ' EUR');
    }
  }, {
    key: 'priceCountry',
    value: function priceCountry(error, response) {
      this.validator.response(error, response);
      if (response.networks && this.emitter.amplified) {
        this.emitter.table(response.networks, ['network', 'mtPrice'], ['network', 'mtPrice']);
      } else if (response.mt) {
        var price = this._maxPrice(response);
        this.emitter.log(price + ' EUR');
      } else {
        this.emitter.log('No price found');
      }
    }
  }, {
    key: '_maxPrice',
    value: function _maxPrice(response) {
      var prices = response.networks.map(function (network) {
        return parseFloat(network.mtPrice);
      });
      prices.push(parseFloat(response.mt));
      return Math.max.apply(null, prices);
    }

    // numbers

  }, {
    key: 'numbersList',
    value: function numbersList(flags) {
      var _this2 = this;

      return function (error, response) {
        _this2.validator.response(error, response);
        if (response.numbers && response.numbers.length > 0) {
          _this2.emitter.pagination(flags, response);
          _this2.emitter.table(response.numbers, ['msisdn'], ['msisdn', 'country', 'type', 'features', 'voiceCallbackType', 'voiceCallbackValue', 'moHttpUrl', 'voiceStatusCallbackUrl']);
        } else {
          _this2.emitter.warn('No numbers');
        }
      };
    }
  }, {
    key: 'numberSearch',
    value: function numberSearch(flags) {
      var _this3 = this;

      return function (error, response) {
        _this3.validator.response(error, response);
        if (response.numbers && response.numbers.length > 0) {
          _this3.emitter.pagination(flags, response);
          _this3.emitter.table(response.numbers, ['msisdn'], ['msisdn', 'country', 'cost', 'type', 'features']);
        } else {
          _this3.emitter.warn('No numbers');
        }
      };
    }
  }, {
    key: 'numberBuyFromNumber',
    value: function numberBuyFromNumber(number) {
      var _this4 = this;

      return function (error, response) {
        _this4.validator.response(error, response);
        _this4.emitter.log('Number purchased: ' + number);
      };
    }
  }, {
    key: 'numberBuyFromPattern',
    value: function numberBuyFromPattern(callback) {
      var _this5 = this;

      return function (error, response) {
        _this5.validator.response(error, response);
        if (response.numbers && response.numbers.length > 0) {
          callback(response.numbers[0].msisdn);
        } else {
          _this5.emitter.error('No numbers match your search');
        }
      };
    }
  }, {
    key: 'numberCancel',
    value: function numberCancel(number) {
      var _this6 = this;

      return function (error, response) {
        _this6.validator.response(error, response);
        _this6.emitter.log('Number cancelled: ' + number);
      };
    }
  }, {
    key: 'numberInsight',
    value: function numberInsight(callback) {
      var _this7 = this;

      return function (error, response) {
        _this7.validator.response(error, response);
        callback(response);
      };
    }

    // applications

  }, {
    key: 'applicationsList',
    value: function applicationsList(flags) {
      var _this8 = this;

      return function (error, response) {
        _this8.validator.response(error, response);
        if (response._embedded && response._embedded.applications && response._embedded.applications.length > 0) {
          _this8.emitter.pagination(flags, response);
          _this8.emitter.table(response._embedded.applications, ['id', 'name'], ['id', 'name']);
        } else {
          _this8.emitter.warn('No applications');
        }
      };
    }
  }, {
    key: 'applicationCreate',
    value: function applicationCreate(flags) {
      var _this9 = this;

      return function (error, response) {
        _this9.validator.response(error, response);
        _this9.emitter.list('Application created: ' + response.id, response);
        _this9._writeKey(flags.keyfile, response.keys.private_key);
      };
    }
  }, {
    key: 'applicationShow',
    value: function applicationShow(error, response) {
      this.validator.response(error, response);
      this.emitter.list(null, response);
    }
  }, {
    key: 'applicationUpdate',
    value: function applicationUpdate(error, response) {
      this.validator.response(error, response);
      this.emitter.list('Application updated: ' + response.id, response);
    }
  }, {
    key: 'applicationDelete',
    value: function applicationDelete(error, response) {
      this.validator.response(error, response);
      this.emitter.log('Application deleted');
    }
  }, {
    key: 'applicationNumbers',
    value: function applicationNumbers(app_id, flags) {
      var _this10 = this;

      return function (error, response) {
        _this10.validator.response(error, response);
        if (response.numbers && response.numbers.length > 0) {
          response.numbers = response.numbers.filter(function (number) {
            return number.voiceCallbackValue == app_id;
          });

          _this10.emitter.pagination(flags, response);
          _this10.emitter.table(response.numbers, ['msisdn'], ['msisdn', 'country', 'type', 'features', 'voiceCallbackType', 'voiceCallbackValue', 'moHttpUrl', 'voiceStatusCallbackUrl']);
        } else {
          _this10.emitter.warn('No numbers');
        }
      };
    }

    // links

  }, {
    key: 'numberUpdate',
    value: function numberUpdate(error, response) {
      this.validator.response(error, response);
      this.emitter.log('Number updated');
    }

    // insight

  }, {
    key: 'insightBasic',
    value: function insightBasic(error, response) {
      this.validator.response(error, response);
      this.emitter.list(response.international_format_number + ' | ' + response.country_code, response);
    }
  }, {
    key: 'insightStandard',
    value: function insightStandard(error, response) {
      this.validator.response(error, response);
      this.emitter.list(response.international_format_number + ' | ' + response.country_code + ' | ' + response.current_carrier.name, response);
    }
  }, {
    key: '_writeKey',
    value: function _writeKey(keyfile, private_key) {
      var _this11 = this;

      if (keyfile) {
        _fs2.default.writeFile(keyfile, private_key, function (error) {
          if (error) {
            _this11.emitter.warn(error.message);
            _this11._promptKey(private_key);
          } else {
            _this11.emitter.log('Private Key saved to: ' + keyfile);
          }
        });
      } else {
        this._promptKey(private_key);
      }
    }
  }, {
    key: '_promptKey',
    value: function _promptKey(private_key) {
      this.emitter.log('\nPrivate Key:\n');
      this.emitter.log(_colors2.default.red.bgWhite(private_key + '\n'));
      this.emitter.log('WARNING: You should save this key somewhere safe and secure now, it will not be provided again.');
    }

    // sending messages

  }, {
    key: 'sendSms',
    value: function sendSms(error, response) {
      this.validator.response(error, response);
      var message = response.messages[0];
      this.emitter.log('Message sent to:   ' + message.to + '\nRemaining balance: ' + message['remaining-balance'] + ' EUR\nMessage price:     ' + message['message-price'] + ' EUR');
    }

    // JWT

  }, {
    key: 'generateJwt',
    value: function generateJwt(error, token) {
      this.validator.response(error, token);
      this.emitter.log('' + token, 'JWT:   ' + token);
    }
  }]);

  return Response;
}();

exports.default = Response;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,